// v1.0.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.3
// source: logs.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogEntryService_WriteLogEntry_FullMethodName = "/logs.LogEntryService/WriteLogEntry"
	LogEntryService_GetLogEntry_FullMethodName   = "/logs.LogEntryService/GetLogEntry"
	LogEntryService_GetLogEntries_FullMethodName = "/logs.LogEntryService/GetLogEntries"
)

// LogEntryServiceClient is the client API for LogEntryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogEntryServiceClient interface {
	WriteLogEntry(ctx context.Context, in *WriteLogCommand, opts ...grpc.CallOption) (*LogEntryResult, error)
	GetLogEntry(ctx context.Context, in *LogEntryQuery, opts ...grpc.CallOption) (*LogEntryResult, error)
	GetLogEntries(ctx context.Context, in *LogEntriesQuery, opts ...grpc.CallOption) (*LogEntriesResult, error)
}

type logEntryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogEntryServiceClient(cc grpc.ClientConnInterface) LogEntryServiceClient {
	return &logEntryServiceClient{cc}
}

func (c *logEntryServiceClient) WriteLogEntry(ctx context.Context, in *WriteLogCommand, opts ...grpc.CallOption) (*LogEntryResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntryResult)
	err := c.cc.Invoke(ctx, LogEntryService_WriteLogEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logEntryServiceClient) GetLogEntry(ctx context.Context, in *LogEntryQuery, opts ...grpc.CallOption) (*LogEntryResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntryResult)
	err := c.cc.Invoke(ctx, LogEntryService_GetLogEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logEntryServiceClient) GetLogEntries(ctx context.Context, in *LogEntriesQuery, opts ...grpc.CallOption) (*LogEntriesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogEntriesResult)
	err := c.cc.Invoke(ctx, LogEntryService_GetLogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogEntryServiceServer is the server API for LogEntryService service.
// All implementations should embed UnimplementedLogEntryServiceServer
// for forward compatibility.
type LogEntryServiceServer interface {
	WriteLogEntry(context.Context, *WriteLogCommand) (*LogEntryResult, error)
	GetLogEntry(context.Context, *LogEntryQuery) (*LogEntryResult, error)
	GetLogEntries(context.Context, *LogEntriesQuery) (*LogEntriesResult, error)
}

// UnimplementedLogEntryServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogEntryServiceServer struct{}

func (UnimplementedLogEntryServiceServer) WriteLogEntry(context.Context, *WriteLogCommand) (*LogEntryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLogEntry not implemented")
}
func (UnimplementedLogEntryServiceServer) GetLogEntry(context.Context, *LogEntryQuery) (*LogEntryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogEntry not implemented")
}
func (UnimplementedLogEntryServiceServer) GetLogEntries(context.Context, *LogEntriesQuery) (*LogEntriesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogEntries not implemented")
}
func (UnimplementedLogEntryServiceServer) testEmbeddedByValue() {}

// UnsafeLogEntryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogEntryServiceServer will
// result in compilation errors.
type UnsafeLogEntryServiceServer interface {
	mustEmbedUnimplementedLogEntryServiceServer()
}

func RegisterLogEntryServiceServer(s grpc.ServiceRegistrar, srv LogEntryServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogEntryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogEntryService_ServiceDesc, srv)
}

func _LogEntryService_WriteLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteLogCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogEntryServiceServer).WriteLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogEntryService_WriteLogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogEntryServiceServer).WriteLogEntry(ctx, req.(*WriteLogCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogEntryService_GetLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntryQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogEntryServiceServer).GetLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogEntryService_GetLogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogEntryServiceServer).GetLogEntry(ctx, req.(*LogEntryQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogEntryService_GetLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogEntriesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogEntryServiceServer).GetLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogEntryService_GetLogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogEntryServiceServer).GetLogEntries(ctx, req.(*LogEntriesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// LogEntryService_ServiceDesc is the grpc.ServiceDesc for LogEntryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogEntryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.LogEntryService",
	HandlerType: (*LogEntryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteLogEntry",
			Handler:    _LogEntryService_WriteLogEntry_Handler,
		},
		{
			MethodName: "GetLogEntry",
			Handler:    _LogEntryService_GetLogEntry_Handler,
		},
		{
			MethodName: "GetLogEntries",
			Handler:    _LogEntryService_GetLogEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}
