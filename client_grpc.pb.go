// v1.0.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.3
// source: client.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogClientService_GetClients_FullMethodName   = "/logs.LogClientService/GetClients"
	LogClientService_GetDatabases_FullMethodName = "/logs.LogClientService/GetDatabases"
	LogClientService_GetTables_FullMethodName    = "/logs.LogClientService/GetTables"
)

// LogClientServiceClient is the client API for LogClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClientServiceClient interface {
	GetClients(ctx context.Context, in *LogClientsQuery, opts ...grpc.CallOption) (*LogClientsResult, error)
	GetDatabases(ctx context.Context, in *DatabasesQuery, opts ...grpc.CallOption) (*DatabasesResult, error)
	GetTables(ctx context.Context, in *TablesQuery, opts ...grpc.CallOption) (*TablesResult, error)
}

type logClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClientServiceClient(cc grpc.ClientConnInterface) LogClientServiceClient {
	return &logClientServiceClient{cc}
}

func (c *logClientServiceClient) GetClients(ctx context.Context, in *LogClientsQuery, opts ...grpc.CallOption) (*LogClientsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogClientsResult)
	err := c.cc.Invoke(ctx, LogClientService_GetClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClientServiceClient) GetDatabases(ctx context.Context, in *DatabasesQuery, opts ...grpc.CallOption) (*DatabasesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabasesResult)
	err := c.cc.Invoke(ctx, LogClientService_GetDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClientServiceClient) GetTables(ctx context.Context, in *TablesQuery, opts ...grpc.CallOption) (*TablesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TablesResult)
	err := c.cc.Invoke(ctx, LogClientService_GetTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogClientServiceServer is the server API for LogClientService service.
// All implementations should embed UnimplementedLogClientServiceServer
// for forward compatibility.
type LogClientServiceServer interface {
	GetClients(context.Context, *LogClientsQuery) (*LogClientsResult, error)
	GetDatabases(context.Context, *DatabasesQuery) (*DatabasesResult, error)
	GetTables(context.Context, *TablesQuery) (*TablesResult, error)
}

// UnimplementedLogClientServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogClientServiceServer struct{}

func (UnimplementedLogClientServiceServer) GetClients(context.Context, *LogClientsQuery) (*LogClientsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedLogClientServiceServer) GetDatabases(context.Context, *DatabasesQuery) (*DatabasesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabases not implemented")
}
func (UnimplementedLogClientServiceServer) GetTables(context.Context, *TablesQuery) (*TablesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTables not implemented")
}
func (UnimplementedLogClientServiceServer) testEmbeddedByValue() {}

// UnsafeLogClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogClientServiceServer will
// result in compilation errors.
type UnsafeLogClientServiceServer interface {
	mustEmbedUnimplementedLogClientServiceServer()
}

func RegisterLogClientServiceServer(s grpc.ServiceRegistrar, srv LogClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogClientService_ServiceDesc, srv)
}

func _LogClientService_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogClientsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogClientServiceServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogClientService_GetClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogClientServiceServer).GetClients(ctx, req.(*LogClientsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogClientService_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabasesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogClientServiceServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogClientService_GetDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogClientServiceServer).GetDatabases(ctx, req.(*DatabasesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogClientService_GetTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TablesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogClientServiceServer).GetTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogClientService_GetTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogClientServiceServer).GetTables(ctx, req.(*TablesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// LogClientService_ServiceDesc is the grpc.ServiceDesc for LogClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.LogClientService",
	HandlerType: (*LogClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClients",
			Handler:    _LogClientService_GetClients_Handler,
		},
		{
			MethodName: "GetDatabases",
			Handler:    _LogClientService_GetDatabases_Handler,
		},
		{
			MethodName: "GetTables",
			Handler:    _LogClientService_GetTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
